---
- name: Create bind mount directories
  ansible.builtin.file:
    path: "{{ item | split(':') | first }}"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    state: directory
    mode: "755"
  loop: "{{ volumes | default('[]') }}"

- name: Create user systemd directory
  become: false
  ansible.builtin.file:
    path: ~/.config/systemd/user
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "755"

- name: Set healthcheck port if not explicitly defined
  ansible.builtin.set_fact:
    _healthcheck_port: "{{ published_ports[0] | regex_replace(':.*', '') if published_ports | length > 0 else '8080' }}"
  when: healthcheck.enabled | bool

- name: Set healthcheck command if not explicitly defined
  ansible.builtin.set_fact:
    _container_healthcheck_cmd: >-
      {{
        healthcheck.cmd if healthcheck.cmd != ""
        else "(command -v curl >/dev/null && curl -f http://localhost:" + _healthcheck_port + ") ||
              (command -v wget >/dev/null && wget -q --spider http://localhost:" + _healthcheck_port + ") ||
              (command -v nc >/dev/null && nc -z localhost " + _healthcheck_port + ") ||
              exit 1"
      }}
  when: healthcheck.enabled | bool

- name: Create podman container
  become: false
  containers.podman.podman_container:
    state: created
    name: "{{ container_name }}"
    image: "{{ container_image }}"
    hostname: "{{ container_name }}-{{ ansible_hostname }}"
    publish: "{{ published_ports | default(omit) }}"
    volume: "{{ volumes + shared_volumes | default(omit) }}"
    device: "{{ devices | default(omit) }}"
    group_add: "{{ group_add | default(omit) }}"
    env: "{{ env | default(omit) }}"
    requires: "{{ requires | default(omit) }}"
    network: "{{ network | default(omit) }}"
    network_aliases: "{{ network_aliases | default(omit) }}"
    userns: "{{ userns | default(omit) }}"
    command: "{{ command | default(omit) }}"
    healthcheck: "{{ _container_healthcheck_cmd if healthcheck.enabled else omit }}"
    healthcheck_interval: "{{ healthcheck.interval if healthcheck.enabled else omit }}"
    healthcheck_timeout: "{{ healthcheck.timeout if healthcheck.enabled else omit }}"
    healthcheck_retries: "{{ healthcheck.retries if healthcheck.enabled else omit }}"
    healthcheck_start_period: "{{ healthcheck.start_period if healthcheck.enabled else omit }}"
    healthcheck_failure_action: "{{ healthcheck.failure_action if healthcheck.enabled else omit }}"
    generate_systemd:
      path: ~/.config/systemd/user
      restart_policy: always
      no_header: true
      after:
        - network-wait.target
      wants:
        - network-wait.target

- name: Pause for 10 secs
  ansible.builtin.pause:
    seconds: 10

- name: Enable and start container on systemd
  become: false
  ansible.builtin.systemd:
    name: "container-{{ container_name }}"
    state: started
    scope: user
    daemon_reload: true
    enabled: true
